import java.util.Random;
import java.util.Scanner;

public class QuickSort {
    public static void qSort(int arr[], int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            // calling recursively for values lesser than pivot
            qSort(arr, low, pivotIndex - 1);
            // calling for values greater than pivot index
            qSort(arr, pivotIndex + 1, high);
        }

    }

    private static int partition(int[] arr, int low, int high) {
        //
        int pivot = arr[high];
        int i = low - 1; // this will help in partioning the elements
        for (int j = low; j < high; j++) // high-1 because we have already take arr[high] as pivot
        {
            if (arr[j] < pivot) {
                i++;
                // swap it
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // if the arr[j]>pivot then
        i++;
        int temp = arr[i];
        arr[i] = pivot;
        arr[high] = temp;
        return i;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the Array Size:");
        int n = sc.nextInt();
        int arr[] = new int[n];
        Random rand = new Random();
        System.out.println("Data is generated Automatically..!!");
        for (int i = 0; i < n; i++) {
            arr[i] = rand.nextInt(1000);
        }

        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        System.out.println("The sorted Array Using Quick Sort is:");
        long start = System.currentTimeMillis();//calculating the time taken to execute
        qSort(arr, 0, n - 1);
        long end = System.currentTimeMillis();
        for (int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();
        System.out.println("Total time taken:" + (end - start) + " ms");

    }
}
